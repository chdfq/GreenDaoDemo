package com.marten.greendaodemo.green_dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.marten.greendaodemo.bean.UserInfo;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, Long> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UserName = new Property(1, String.class, "userName", false, "user_name");
        public final static Property UserPhone = new Property(2, String.class, "userPhone", false, "user_phone");
        public final static Property UpUser = new Property(3, String.class, "upUser", false, "up_user");
        public final static Property UserAddress = new Property(4, String.class, "userAddress", false, "user_address");
        public final static Property UserService = new Property(5, String.class, "userService", false, "user_service");
        public final static Property UserGift = new Property(6, String.class, "userGift", false, "user_gift");
        public final static Property Level = new Property(7, int.class, "level", false, "LEVEL");
        public final static Property Selected = new Property(8, boolean.class, "selected", false, "SELECTED");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"user_name\" TEXT," + // 1: userName
                "\"user_phone\" TEXT," + // 2: userPhone
                "\"up_user\" TEXT," + // 3: upUser
                "\"user_address\" TEXT," + // 4: userAddress
                "\"user_service\" TEXT," + // 5: userService
                "\"user_gift\" TEXT," + // 6: userGift
                "\"LEVEL\" INTEGER NOT NULL ," + // 7: level
                "\"SELECTED\" INTEGER NOT NULL );"); // 8: selected
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindString(3, userPhone);
        }
 
        String upUser = entity.getUpUser();
        if (upUser != null) {
            stmt.bindString(4, upUser);
        }
 
        String userAddress = entity.getUserAddress();
        if (userAddress != null) {
            stmt.bindString(5, userAddress);
        }
 
        String userService = entity.getUserService();
        if (userService != null) {
            stmt.bindString(6, userService);
        }
 
        String userGift = entity.getUserGift();
        if (userGift != null) {
            stmt.bindString(7, userGift);
        }
        stmt.bindLong(8, entity.getLevel());
        stmt.bindLong(9, entity.getSelected() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String userName = entity.getUserName();
        if (userName != null) {
            stmt.bindString(2, userName);
        }
 
        String userPhone = entity.getUserPhone();
        if (userPhone != null) {
            stmt.bindString(3, userPhone);
        }
 
        String upUser = entity.getUpUser();
        if (upUser != null) {
            stmt.bindString(4, upUser);
        }
 
        String userAddress = entity.getUserAddress();
        if (userAddress != null) {
            stmt.bindString(5, userAddress);
        }
 
        String userService = entity.getUserService();
        if (userService != null) {
            stmt.bindString(6, userService);
        }
 
        String userGift = entity.getUserGift();
        if (userGift != null) {
            stmt.bindString(7, userGift);
        }
        stmt.bindLong(8, entity.getLevel());
        stmt.bindLong(9, entity.getSelected() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // userName
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // userPhone
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // upUser
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // userAddress
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // userService
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // userGift
            cursor.getInt(offset + 7), // level
            cursor.getShort(offset + 8) != 0 // selected
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUserName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserPhone(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setUpUser(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setUserAddress(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUserService(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUserGift(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setLevel(cursor.getInt(offset + 7));
        entity.setSelected(cursor.getShort(offset + 8) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(UserInfo entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
